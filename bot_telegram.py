import asyncio
from datetime import datetime, timedelta
import logging
import platform
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

import os
from aiohttp import web

load_dotenv()
KEY_TG = os.getenv('KEY_TG')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=KEY_TG)
dp = Dispatcher(read_timeout=30, write_timeout=30)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–µ–∂—É—Ä—Å—Ç–≤–∞ (user_id -> –¥–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
confirmed_duties = {}

# –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ—Ç–∞—Ü–∏–∏
NAMES = ['–ê–Ω—è', '–õ–∞—Ä–∏–∫', '–ú–∞—à–∞']
START_DATE = datetime(2025, 6, 14)  # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
MONTHS_RU = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

async def handle_health_check(request):
    return web.Response(text="Bot is running")

async def run_web_server():
    app = web.Application()
    app.router.add_get('/', handle_health_check)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()
    logger.info("Web server started on port 8000")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–º–µ–Ω–∞–º–∏
def get_names_keyboard():
    builder = ReplyKeyboardBuilder()
    for name in NAMES:
        builder.add(KeyboardButton(text=name))
    return builder.as_markup(resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ "–ò–¥—É –¥–µ–∂—É—Ä–∏—Ç—å"
def get_duty_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–¥—É –¥–µ–∂—É—Ä–∏—Ç—å! ‚úÖ", callback_data="confirm_duty")]
    ])
    return keyboard

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –≤–∏–¥–µ "14 –∏—é–Ω—è"
def format_date_ru(date):
    day = date.day
    month = MONTHS_RU[date.month]
    return f"{day} {month}".lstrip('0').replace(' 0', ' ')

# –†–∞—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –∏ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
def get_duty_info(selected_name):
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    days_since_start = (today - START_DATE).days
    cycle_day = days_since_start % 9  # –¶–∏–∫–ª –∏–∑ 9 –¥–Ω–µ–π (3 —á–µ–ª–æ–≤–µ–∫–∞ √ó (1 –¥–µ–Ω—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞ + 2 –¥–Ω—è –æ—Ç–¥—ã—Ö–∞))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
    if cycle_day == 0:
        current_duty_name = NAMES[0]  # –ê–Ω—è
    elif cycle_day == 3:
        current_duty_name = NAMES[1]  # –õ–∞—Ä–∏–∫
    elif cycle_day == 6:
        current_duty_name = NAMES[2]  # –ú–∞—à–∞
    else:
        current_duty_name = None  # –ù–∏–∫—Ç–æ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç
    
    # –ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    selected_index = NAMES.index(selected_name)
    days_until_duty = None
    for i in range(9):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 9 –¥–Ω–µ–π
        check_day = (days_since_start + i) % 9
        if (selected_index == 0 and check_day == 0) or \
           (selected_index == 1 and check_day == 3) or \
           (selected_index == 2 and check_day == 6):
            days_until_duty = i
            break
    if days_until_duty is None or (days_until_duty == 0 and today > datetime.now()):
        days_until_duty = 9 - cycle_day + (selected_index * 3) % 9
    next_duty_date = today + timedelta(days=days_until_duty)
    
    return current_duty_name, next_duty_date

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞—Ñ–∏–∫–æ–º –¥–µ–∂—É—Ä—Å—Ç–≤ –≤ –≤–∞–Ω–Ω–æ–π. "
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –∏–º—è, –∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å "
        "(–≤ 12:00, 18:00 –∏ 21:00) –≤ —Ç–≤–æ–π –¥–µ–Ω—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞! üõÅ"
    )
    await message.answer(welcome_message)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—ë –∏–º—è:", reply_markup=get_names_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏
@dp.message(lambda message: message.text in NAMES)
async def handle_name_selection(message: types.Message):
    user_id = message.from_user.id
    selected_name = message.text
    user_data[user_id] = selected_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    _, next_duty_date = get_duty_info(selected_name)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatted_date = format_date_ru(next_duty_date)
    
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {selected_name}. "
        f"–¢–≤–æ—ë –±–ª–∏–∂–∞–π—à–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: {formatted_date}. "
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ 12:00, 18:00 –∏ 21:00 –≤ –¥–µ–Ω—å –¥–µ–∂—É—Ä—Å—Ç–≤–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–¥—É –¥–µ–∂—É—Ä–∏—Ç—å"
@dp.callback_query(lambda c: c.data == "confirm_duty")
async def confirm_duty(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    confirmed_duties[user_id] = today
    
    await callback.message.edit_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {user_data.get(user_id, '–¥—Ä—É–≥')}! –¢—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. "
        f"–ë–æ–ª—å—à–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç! üõÅ"
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_duty_reminders():
    while True:
        now = datetime.now()
        if now.minute == 0 and now.hour in [12, 18, 21]:  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 12:00, 18:00, 21:00
            today = now.replace(hour=0, minute=0, second=0, microsecond=0)
            days_since_start = (today - START_DATE).days
            cycle_day = days_since_start % 9  # –¶–∏–∫–ª –∏–∑ 9 –¥–Ω–µ–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–∂—É—Ä–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è
            if cycle_day in [0, 3, 6]:
                current_index = cycle_day // 3  # 0 -> 0 (–ê–Ω—è), 3 -> 1 (–õ–∞—Ä–∏–∫), 6 -> 2 (–ú–∞—à–∞)
                current_duty_name = NAMES[current_index]
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–°–µ–≥–æ–¥–Ω—è ({format_date_ru(today)}) –¥–µ–∂—É—Ä–∏—Ç: {current_duty_name}")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                formatted_date = format_date_ru(today)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≤—ã–±—Ä–∞–≤—à–∏–º —Ç–µ–∫—É—â–µ–µ –∏–º—è
                for user_id, name in user_data.items():
                    if name == current_duty_name:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∂—É—Ä—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è
                        if confirmed_duties.get(user_id) != today:
                            try:
                                await bot.send_message(
                                    user_id,
                                    f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name}, —Å–µ–≥–æ–¥–Ω—è ({formatted_date}) —Ç—ã –¥–µ–∂—É—Ä–∏—à—å –≤ –≤–∞–Ω–Ω–æ–π! üõÅ",
                                    reply_markup=get_duty_confirmation_keyboard()
                                )
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({name})")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            else:
                logger.info(f"–°–µ–≥–æ–¥–Ω—è ({format_date_ru(today)}) –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–∂—É—Ä–∏—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_bot_commands():
    commands = [
        BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –∏–º—è")
    ]
    await bot.set_my_commands(commands)

async def on_startup():
    await set_bot_commands()
    asyncio.create_task(send_duty_reminders())
    asyncio.create_task(run_web_server())

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())